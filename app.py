# bot_api = ""
bot_api = '' # –±–æ—Ç –¥–ª—è —Ç–µ—Å—Ç–æ–≤
folder = 'data'
# folder = '/data'


import os
import sqlite3
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
import telebot
import re
from datetime import datetime
import pytz
from flask import Flask
import sys
sys.path.append(folder)
import threading

from timetable_html import *
from anekdots import *

if not os.path.exists(f"{folder}"):
    os.makedirs(f"{folder}")
    print("–ü–∞–ø–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ —Å–æ–∑–¥–∞–Ω–∞")
# –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
folder_path = f"{folder}"
# –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db_name = "database.db"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db_path = os.path.join(folder_path, db_name)
if os.path.exists(db_path):
    print("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
else:
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect(f"{folder}/database.db")
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE users (
            user_id INTEGER,
            course INTEGER,
            groupe INTEGER,
            time_registration INTEGER,
            id_message INTEGER);
        ''')
    # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    conn.close()

bot = telebot.TeleBot(bot_api)

user_data = {}

hello_text = "–ü—Ä–∏–≤–µ—Ç"
text_groups = "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É"
text_days = "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å"
text_return = '< –ù–∞–∑–∞–¥'
# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
btn_return_group = InlineKeyboardButton(text = text_return, callback_data = 'return_course')
btn_return_weeks = InlineKeyboardButton(text = text_return, callback_data = 'return_weeks')
btn_return_days = InlineKeyboardButton(text = text_return, callback_data = 'return_days')
btn_return_timetable = InlineKeyboardButton(text = text_return, callback_data = 'return_timetable')
btn_return_profile = InlineKeyboardButton(text = text_return, callback_data = 'return_profile')
btn_return_keyboard_notification = InlineKeyboardButton(text = text_return, callback_data = 'notification')

btn_add_group = InlineKeyboardButton(text = '+ –¥–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É', callback_data = 'new_group')
btn_profile = InlineKeyboardButton(text = 'üë§ –ü—Ä–æ—Ñ–∏–ª—å', callback_data ='profile')

keyboard_groups = InlineKeyboardMarkup(row_width=2)
keyboard_notification = InlineKeyboardMarkup(row_width=3)
groups = {}
groups_notification = {}

conn = sqlite3.connect(f'{folder}/database.db')
cursor = conn.cursor()
cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
tables = cursor.fetchall()
num_buttons = 0
row_buttons = []
row_buttons_notification = []

for table in tables:
    if table[0] == 'users':
        continue  # –ü—Ä–æ–ø—É—Å–∫ —Ç–∞–±–ª–∏—Ü—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    button_text = table[0].replace('_', '-')  # –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
    button_notification_callback_data = f'{table[0]}_notification'
    button_callback_data = table[0]
    groups[table[0]] = table[0]
    groups_notification[table[0] + '_notification'] = f'{table[0]}_notification'
    button = InlineKeyboardButton(text=f'{button_text}', callback_data=button_callback_data)
    button_notification = InlineKeyboardButton(text=f'{button_text}', callback_data=button_notification_callback_data)
    row_buttons.append(button)
    row_buttons_notification.append(button_notification)
    num_buttons += 1
    if num_buttons == 2:
        keyboard_groups.add(*row_buttons)
        keyboard_notification.add(*row_buttons_notification)
        row_buttons = []
        row_buttons_notification = []
        num_buttons = 0

if num_buttons > 0:
    keyboard_groups.add(*row_buttons)
    keyboard_notification.add(*row_buttons_notification)
        
conn.close()

keyboard_groups.add(btn_add_group, btn_profile)
btn_delete_notification = InlineKeyboardButton(text = '√ó –û—Ç–ø–∏—Å–∞—Ç—å—Å—è', callback_data='unsubscribe')
keyboard_notification.add(btn_return_profile, btn_delete_notification)

btn_week_even = InlineKeyboardButton(text = '–ß—ë—Ç–Ω–∞—è', callback_data = 'week_even')
btn_week_odd = InlineKeyboardButton(text = '–ù–µ—á—ë—Ç–Ω–∞—è', callback_data = 'week_odd')
keyboard_weeks = InlineKeyboardMarkup(row_width = 2)
keyboard_weeks.add(btn_week_even, btn_week_odd, btn_return_weeks)

btn_day1 = InlineKeyboardButton(text = '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', callback_data = 'day1')
btn_day2 = InlineKeyboardButton(text = '–í—Ç–æ—Ä–Ω–∏–∫', callback_data = 'day2')
btn_day3 = InlineKeyboardButton(text = '–°—Ä–µ–¥–∞', callback_data = 'day3')
btn_day4 = InlineKeyboardButton(text = '–ß–µ—Ç–≤–µ—Ä–≥', callback_data = 'day4')
btn_day5 = InlineKeyboardButton(text = '–ü—è—Ç–Ω–∏—Ü–∞', callback_data = 'day5')
btn_day6 = InlineKeyboardButton(text = '–°—É–±–±–æ—Ç–∞', callback_data = 'day6')
btn_week = InlineKeyboardButton(text = '–ù–µ–¥–µ–ª—è', callback_data = 'week')
keyboard_days = InlineKeyboardMarkup(row_width = 2)
keyboard_days.add(btn_day1, btn_day2, btn_day3, btn_day4, btn_day5, btn_day6, btn_week)
keyboard_days.add(btn_return_days)

keyboard_profile = InlineKeyboardMarkup(row_width = 1)
btn_notification = InlineKeyboardButton(text = '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', callback_data = 'notification')
btn_schedule_call = InlineKeyboardButton(text = '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤', callback_data = 'schedule_call')
keyboard_profile.add(btn_notification, btn_schedule_call, btn_return_weeks)

keyboard_timetable = InlineKeyboardMarkup(row_width=2)
keyboard_timetable.add(btn_return_timetable)

keyboard_start_message = InlineKeyboardMarkup()
keyboard_start_message.add(InlineKeyboardButton(text = '–ü—Ä–æ—á–∏—Ç–∞–Ω–æ', callback_data = 'del_message'))

keyboard_return_group = InlineKeyboardMarkup()
keyboard_return_group.add(btn_return_weeks)

keyboard_return_profile = InlineKeyboardMarkup()
keyboard_return_profile.add(btn_return_profile)

keyboard_return_notification = InlineKeyboardMarkup()
keyboard_return_notification.add(btn_return_keyboard_notification)



def now_time():
    now = datetime.now()
    tz = pytz.timezone('Europe/Moscow')
    now_moscow = now.astimezone(tz)
    current_time = now_moscow.strftime("%H:%M")
    current_date = now_moscow.strftime("%m.%d.%Y")
    date = f"{current_date} {current_time}"
    return date

def get_weekday():
    import datetime
    weekday = datetime.datetime.today().weekday()
    days = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']
    return days[weekday]

def current_week():
    import datetime
    today = datetime.date.today()
    week_number = today.isocalendar()[1]
    if week_number % 2 == 0: x = '—á—ë—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è'
    else: x = '–Ω–µ—á—ë—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è'
    return x

def notification():
    conn = sqlite3.connect(f'{folder}/database.db')
    cursor = conn.cursor()
    query = f"SELECT * FROM users"
    cursor.execute(query)
    result = cursor.fetchall()
    message = ""
    for row in result:
        user = row[0]
        id_message = row[4]
        group = row[2]
        if str(group) != '0':
            try:
                x = current_week()
                if x == '—á—ë—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è': week = '–ß–µ—Ç–Ω–∞—è'
                else: week = '–ù–µ—á–µ—Ç–Ω–∞—è'
                
                day = get_weekday()
                # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                table_name = group
                query = f"SELECT * FROM {table_name} WHERE week = '{week}' AND day = '{day}'"
                cursor.execute(query)
                result = cursor.fetchall()
                # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Å—Ç—Ä–æ–∫–∞–º–∏
                message = ""
                prev_pair = ""
                for row in result:
                    if row[2] != prev_pair:
                        time = row[8].replace('-', '\-')
                        message += f"\n*{row[2]} –ø–∞—Ä–∞* ‚Ä¢ _{time}_\n"
                    if row[7] == 0:
                        group_text = ''
                    else:
                        group_text = f'__–ì—Ä—É–ø–ø–∞: *{row[7]}*__\n'
                    aud = row[6].replace('-', '\-')
                    aud = aud.replace('.','')
                    aud = aud.replace('+', '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
                    lesson = row[3].replace('-', '\-')
                    lesson = lesson.replace('(', '"')
                    lesson = lesson.replace(')', '"')
                    message += f"{group_text}*{lesson}* ‚Ä¢ _{row[5]}_\n*{row[4]}* ‚Ä¢ {aud}\n"
                    prev_pair = row[2]
            
                # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
                if message == '':
                    message = "–†–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç"
                group = group.replace("_", "\-")
                bot.send_message(chat_id=user, text=f'–°–µ–≥–æ–¥–Ω—è __*{day.upper()}*__ ‚Ä¢ {group}\n{message}', reply_markup = keyboard_start_message, parse_mode = 'MarkdownV2')
            except Exception as e:
                print(f'–û—à–∏–±–∫–∞ –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏: {e}')
                print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞")
    conn.close()

    try:
        x = anek()
        bot.send_message(chat_id=1000533946, text=f"{x}", reply_markup = keyboard_start_message)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –∞–Ω–µ–∫–¥–æ—Ç–µ: {e}")
        bot.send_message(chat_id=1000533946, text='–Ø –≥–¥–µ —Ç–æ –ø—Ä–æ–µ–±–∞–ª—Å—è, –Ω–æ –∑–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã–ª –±—ã—Ç—å –∞–Ω–µ–∫–¥–æ—Ç', reply_markup = keyboard_start_message, parse_mode = 'MarkdownV2')
        bot.send_message(chat_id=1210146115, text=f"–û—à–∏–±–∫–∞ –≤ –∞–Ω–µ–∫–¥–æ—Ç–µ: {e}", reply_markup = keyboard_start_message)


def timetable_day(call, day):
    group = user_data[call.message.chat.id]['group']
    week = user_data[call.message.chat.id]['week']
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect(f'{folder}/database.db')
    cursor = conn.cursor()
    table_name = group
    query = f"SELECT * FROM {table_name} WHERE week = '{week}' AND day = '{day}'"
    cursor.execute(query)
    result = cursor.fetchall()
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Å—Ç—Ä–æ–∫–∞–º–∏
    message = ""
    prev_pair = ""
    for row in result:
        if row[2] != prev_pair:
            time = row[8].replace('-', '\-')
            message += f"\n*{row[2]} –ø–∞—Ä–∞* ‚Ä¢ _{time}_\n"
        if row[7] == 0:
            group_text = ''
        else:
            group_text = f'__–ì—Ä—É–ø–ø–∞: *{row[7]}*__\n'
        aud = row[6].replace('-', '\-')
        aud = aud.replace('.','')
        aud = aud.replace('+', '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
        lesson = row[3].replace('-', '\-')
        lesson = lesson.replace('(', '"')
        lesson = lesson.replace(')', '"')
        message += f"{group_text}*{lesson}* ‚Ä¢ _{row[5]}_\n*{row[4]}* ‚Ä¢ {aud}\n"
        prev_pair = row[2]

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    if message == '':
        message = "–†–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –Ω–µ—Ç"
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=message, reply_markup = keyboard_timetable, parse_mode = 'MarkdownV2')
    # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    conn.close()

def new_group(message):
    x = message.text
    try:
        bot.delete_message(message.chat.id, message.message_id)
    except Exception as e:
        print('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è')
    successfully = new_timetable(x)
    print(successfully)

    conn = sqlite3.connect(f'{folder}/database.db')
    cursor = conn.cursor()
    if successfully == False:
        query = f"SELECT * FROM users WHERE user_id = '{message.chat.id}'"
        cursor.execute(query)
        result = cursor.fetchall()
        message = ""
        user = result[0][0]
        id_message = result[0][4]
        bot.edit_message_text(chat_id=user, message_id=id_message, text="–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", reply_markup = keyboard_return_group)
    if successfully == True:
        query = f"SELECT * FROM users"
        cursor.execute(query)
        result = cursor.fetchall()
        message = ""
        for row in result:
            user = row[0]
            id_message = row[4]
            bot.edit_message_text(chat_id=user, message_id=id_message, text="–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã. –û–∂–∏–¥–∞–π—Ç–µ...", reply_markup = '')
        dasd

@bot.message_handler(commands=['start'])
def start(message):
    message_id = message.id+1
    print(message_id)
    conn = sqlite3.connect(f'{folder}/database.db')
    c = conn.cursor()
    c.execute("SELECT * FROM users WHERE user_id=?", (message.chat.id,))
    result = c.fetchone()
    if result is None:
        date_registration = now_time()
        c.execute("INSERT INTO users (user_id, course, groupe, time_registration, id_message) VALUES (?, ?, ?, ?, ?)",
                  (message.chat.id, 0, 0, date_registration, message_id))
        conn.commit()
        conn.close()
        print('–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', message.chat.id)
    else:
        c.execute(f"UPDATE users SET id_message = {(message_id)} WHERE user_id = {message.chat.id}")
        print('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å' ,message.chat.id,'—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ')
        conn.commit()
        pass
    conn.close()
    bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    bot.send_message(message.chat.id, text_groups, reply_markup = keyboard_groups)

@bot.message_handler(commands=['info_users'])
def info_users(message):
    bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    conn = sqlite3.connect(f'{folder}/database.db')
    c = conn.cursor()
    c.execute("SELECT * FROM users")
    result = c.fetchall()
    message = ''
    for row in result:
        message += f'{row}\n'
    bot.send_message(chat_id=1210146115, text=message, reply_markup = keyboard_start_message)
    conn.close()

@bot.message_handler(commands=['anekdot'])
def info_users(message):
    bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    x = anek()
    bot.send_message(message.chat.id, x, reply_markup = keyboard_start_message)


@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    if call.data in groups:
        if call.message.chat.id not in user_data:
            user_data[call.message.chat.id] = {}
        print(call.data)
        group = groups[call.data]
        user_data[call.message.chat.id]['group'] = group
        text_weeks = f'–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–¥–µ–ª—é\n–°–µ–π—á–∞—Å __*{current_week()}*__'
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=text_weeks, reply_markup=keyboard_weeks, parse_mode = 'MarkdownV2')

    weeks = {'week_even': '–ß–µ—Ç–Ω–∞—è', 'week_odd': "–ù–µ—á–µ—Ç–Ω–∞—è"}
    if call.data in weeks.keys():
        week = weeks[call.data]
        user_data[call.message.chat.id]['week'] = week
        week_day = get_weekday()
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f'{text_days}\n–°–µ–π—á–∞—Å __*{week_day}*__', reply_markup=keyboard_days, parse_mode = 'MarkdownV2')

    days = {'day1': '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', 'day2': '–í—Ç–æ—Ä–Ω–∏–∫', 'day3': '–°—Ä–µ–¥–∞', 'day4': "–ß–µ—Ç–≤–µ—Ä–≥", 'day5': "–ü—è—Ç–Ω–∏—Ü–∞", 'day6': "–°—É–±–±–æ—Ç–∞"}
    if call.data in days.keys():
        day = days[call.data]
        timetable_day(call, day)

    if call.data == 'week':
        group = user_data[call.message.chat.id]['group']
        week = user_data[call.message.chat.id]['week']
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect(f'{folder}/database.db')
        cursor = conn.cursor()
        # SQL-–∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å
        table_name = group
        query = f"SELECT * FROM {table_name} WHERE week = '{week}'"
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        cursor.execute(query)
        result = cursor.fetchall()
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Å—Ç—Ä–æ–∫–∞–º–∏
        message = ""
        day_pair = ''

        for row in result:
            prev_pair = ''
            if row[1] != day_pair:
                message += f"\n*__{row[1].upper()}__*\n"
                day_pair = row[1]
            if row[2] != prev_pair:
                time = row[8].replace('-', '\-')
                message += f"\n*{row[2]} –ø–∞—Ä–∞* ‚Ä¢ _{time}_\n"
                prev_pair = row[2]

            if row[7] == 0:
                group_text = ''
            else:
                group_text = f'__–ì—Ä—É–ø–ø–∞: *{row[7]}*__\n'
            aud = row[6].replace('-', '\-')
            aud = aud.replace('.','')
            aud = aud.replace('+', '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
            lesson = row[3].replace('-', '\-')
            lesson = lesson.replace('(', '"')
            lesson = lesson.replace(')', '"')
            message += f"{group_text}*{lesson}* ‚Ä¢ _{row[5]}_\n*{row[4]}* ‚Ä¢ {aud}\n"
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        if message == '':
            message = "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=message, reply_markup=keyboard_timetable, parse_mode = 'MarkdownV2')
        # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        conn.close()

    if call.data == 'new_group':
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é –≥—Ä—É–ø–ø—É", reply_markup=keyboard_return_group)
        bot.register_next_step_handler(call.message, new_group)

    if call.data == 'profile':
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å", reply_markup=keyboard_profile)

    if call.data == 'schedule_call':
        with open(f'{folder}/call.txt', 'r+', encoding='utf-8') as f:
            shedule_call_text = f.read()
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=shedule_call_text, reply_markup=keyboard_return_profile)

    if call.data == 'notification':
        conn = sqlite3.connect(f'{folder}/database.db')
        cursor = conn.cursor()
        query = f"SELECT groupe FROM users WHERE user_id = '{call.message.chat.id}'"
        cursor.execute(query)
        result = cursor.fetchall()
        if str(result[0][0]) == '0':
            text = '–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É, —á—Ç–æ –±—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'
        else:
            result = result[0][0].replace("_", '-')
            text = f"–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≥—Ä—É–ø–ø—É: {result}"
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=text, reply_markup=keyboard_notification)

    if call.data in groups_notification:
        group_notification = str(groups_notification[call.data])
        group_notification = group_notification.replace('_notification', "")
        conn = sqlite3.connect(f'{folder}/database.db')
        cursor = conn.cursor()
        cursor.execute(f"UPDATE users SET groupe = '{group_notification}' WHERE user_id = {call.message.chat.id}")
        conn.commit()
        conn.close()
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –í–∞–º –≤ 7:30 –∏ –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è', reply_markup=keyboard_return_notification)

    if call.data == 'unsubscribe':
        conn = sqlite3.connect(f'{folder}/database.db')
        cursor = conn.cursor()
        cursor.execute(f"UPDATE users SET groupe = 0 WHERE user_id = {call.message.chat.id}")
        conn.commit()
        conn.close()
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π', reply_markup=keyboard_return_notification)



    if call.data == 'return_main':
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=hello_text, reply_markup = keyboard_main)
        course = 0
    if call.data == 'return_course':
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=text_course, reply_markup = keyboard_courses)
        group = 0
    if call.data == 'return_weeks':
        bot.clear_step_handler_by_chat_id(chat_id=call.message.chat.id)
        week = 0
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=text_groups, reply_markup = keyboard_groups)
    if call.data == 'return_days':
        day_edit = 0
        text_weeks = f'–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–¥–µ–ª—é\n–°–µ–π—á–∞—Å __*{current_week()}*__'
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=text_weeks, reply_markup=keyboard_weeks, parse_mode = 'MarkdownV2')
    if call.data == 'return_timetable':
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=text_days, reply_markup = keyboard_days)
    if call.data == 'return_profile':
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å", reply_markup=keyboard_profile)



    if call.data == 'del_message':
        try:
            bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        except Exception as e:
            print("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–µ–Ω–æ")



def send_start_message():
    conn = sqlite3.connect(f'{folder}/database.db')
    cursor = conn.cursor()
    # SQL-–∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å
    query = f"SELECT * FROM users"
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    cursor.execute(query)
    result = cursor.fetchall()
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Å—Ç—Ä–æ–∫–∞–º–∏
    time = now_time()
    message = ""
    for row in result:
        user = row[0]
        id_message = row[4]
        print(id_message)
        # –ü–æ–ª—É—á–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞, –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
        chat_id = user
        try:
            bot.edit_message_text(chat_id=user, message_id=id_message, text="–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...", reply_markup = '')
            bot.edit_message_text(chat_id=user, message_id=id_message, text=text_groups, reply_markup = keyboard_groups)
        except Exception as e:
            print(f'–û—à–∏–±–∫–∞ –≤ —Å—Ç–∞—Ä—Ç–µ: {e}')
            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞")
    # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    try:
        with open(f'{folder}/log.txt', 'r+', encoding='utf-8') as f:
            text_error = f.read()
    except Exception as e:
        text_error = "–ù–µ—Ç —Ñ–∞–π–ª–∞ —Å –ª–æ–≥–æ–º"
        print(f'–û—à–∏–±–∫–∞ –≤ –ø–æ–∏—Å–∫–µ –ª–æ–≥–∞: {e}')
    with open(f'{folder}/log.txt', 'w+', encoding='utf-8') as f:
        print("–§–∞–π–ª —Å –ª–æ–≥–æ–º, –æ—á–∏—â–µ–Ω")
    bot.send_message(chat_id=1210146115, text=f"–ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω\n{time}\n–û—à–∏–±–∫–∞: {text_error}", reply_markup = keyboard_start_message)
    x = anek()
    bot.send_message(chat_id=1210146115, text=f"{x}", reply_markup = keyboard_start_message)
    conn.close()

def notification_thread():
    import datetime
    import time
    while True:
        now = datetime.datetime.now()
        tz = pytz.timezone('Europe/Moscow')
        now = now.astimezone(tz)
        weekday = get_weekday()
        if weekday != '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ':
            if now.hour == 5 and now.minute == 30:
                notification()
        time.sleep(60)


# bot.polling()
try:
    thread = threading.Thread(target=notification_thread)
    thread.start()
    send_start_message()
    time = now_time()
    bot.polling()
    print(f'–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...n{time}')
except Exception as e:
    print(f"–û—à–∏–±–∫–∞: {e}")
    with open(f'{folder}/log.txt', 'w+', encoding='utf-8') as f:
        f.write(str(e))
    send_start_message()
    time = now_time()
    print(f'–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...n{time}')
    thread = threading.Thread(target=notification_thread)
    thread.start()
    bot.polling()